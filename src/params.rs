// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::structs::*;
use crate::typedefs::*;

#[derive(Clone, Copy)]
pub struct ImmutableAddMaterialParams {
    pub(crate) id: i32,
}

impl ImmutableAddMaterialParams {
    pub fn id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}

    pub fn mat(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_MAT))
	}

    pub fn prop(&self) -> ScImmutableUint8 {
		ScImmutableUint8::new(self.id, idx_map(IDX_PARAM_PROP))
	}
}

#[derive(Clone, Copy)]
pub struct MutableAddMaterialParams {
    pub(crate) id: i32,
}

impl MutableAddMaterialParams {
    pub fn id(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}

    pub fn mat(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_MAT))
	}

    pub fn prop(&self) -> ScMutableUint8 {
		ScMutableUint8::new(self.id, idx_map(IDX_PARAM_PROP))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableAddPPToFractionParams {
    pub(crate) id: i32,
}

impl ImmutableAddPPToFractionParams {
    pub fn frac_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_FRAC_ID))
	}

    pub fn pp_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_PP_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableAddPPToFractionParams {
    pub(crate) id: i32,
}

impl MutableAddPPToFractionParams {
    pub fn frac_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_FRAC_ID))
	}

    pub fn pp_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_PP_ID))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableCreateFractionParams {
    pub(crate) id: i32,
}

impl ImmutableCreateFractionParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableCreateFractionParams {
    pub(crate) id: i32,
}

impl MutableCreateFractionParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableCreatePPParams {
    pub(crate) id: i32,
}

impl ImmutableCreatePPParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableCreatePPParams {
    pub(crate) id: i32,
}

impl MutableCreatePPParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableCreateRecyclateParams {
    pub(crate) id: i32,
}

impl ImmutableCreateRecyclateParams {
    pub fn frac_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_FRAC_ID))
	}

    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct MutableCreateRecyclateParams {
    pub(crate) id: i32,
}

impl MutableCreateRecyclateParams {
    pub fn frac_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_FRAC_ID))
	}

    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_NAME))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableInitParams {
    pub(crate) id: i32,
}

impl ImmutableInitParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableInitParams {
    pub(crate) id: i32,
}

impl MutableInitParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSetMaterialsParams {
    pub(crate) id: i32,
}

impl ImmutableSetMaterialsParams {
    pub fn comp(&self) -> ImmutableCompositions {
		let sub_id = get_object_id(self.id, idx_map(IDX_PARAM_COMP), TYPE_ARRAY | TYPE_BYTES);
		ImmutableCompositions { obj_id: sub_id }
	}

    pub fn id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableSetMaterialsParams {
    pub(crate) id: i32,
}

impl MutableSetMaterialsParams {
    pub fn comp(&self) -> MutableCompositions {
		let sub_id = get_object_id(self.id, idx_map(IDX_PARAM_COMP), TYPE_ARRAY | TYPE_BYTES);
		MutableCompositions { obj_id: sub_id }
	}

    pub fn id(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSetOwnerParams {
    pub(crate) id: i32,
}

impl ImmutableSetOwnerParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableSetOwnerParams {
    pub(crate) id: i32,
}

impl MutableSetOwnerParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetAmountOfRequiredFundsParams {
    pub(crate) id: i32,
}

impl ImmutableGetAmountOfRequiredFundsParams {
    pub fn charge_weight(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.id, idx_map(IDX_PARAM_CHARGE_WEIGHT))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetAmountOfRequiredFundsParams {
    pub(crate) id: i32,
}

impl MutableGetAmountOfRequiredFundsParams {
    pub fn charge_weight(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.id, idx_map(IDX_PARAM_CHARGE_WEIGHT))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetMaterialsParams {
    pub(crate) id: i32,
}

impl ImmutableGetMaterialsParams {
    pub fn id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetMaterialsParams {
    pub(crate) id: i32,
}

impl MutableGetMaterialsParams {
    pub fn id(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetPPParams {
    pub(crate) id: i32,
}

impl ImmutableGetPPParams {
    pub fn id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetPPParams {
    pub(crate) id: i32,
}

impl MutableGetPPParams {
    pub fn id(&self) -> ScMutableHash {
		ScMutableHash::new(self.id, idx_map(IDX_PARAM_ID))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetTokenPerPackageParams {
    pub(crate) id: i32,
}

impl ImmutableGetTokenPerPackageParams {
    pub fn prod_pass(&self) -> ImmutableProductPass {
		ImmutableProductPass { obj_id: self.id, key_id: idx_map(IDX_PARAM_PROD_PASS) }
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetTokenPerPackageParams {
    pub(crate) id: i32,
}

impl MutableGetTokenPerPackageParams {
    pub fn prod_pass(&self) -> MutableProductPass {
		MutableProductPass { obj_id: self.id, key_id: idx_map(IDX_PARAM_PROD_PASS) }
	}
}
