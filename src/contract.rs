// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use std::ptr;

use wasmlib::*;

use crate::consts::*;
use crate::params::*;
use crate::results::*;

pub struct AddMaterialCall {
	pub func: ScFunc,
	pub params: MutableAddMaterialParams,
}

pub struct AddPPToFractionCall {
	pub func: ScFunc,
	pub params: MutableAddPPToFractionParams,
	pub results: ImmutableAddPPToFractionResults,
}

pub struct CreateFractionCall {
	pub func: ScFunc,
	pub params: MutableCreateFractionParams,
	pub results: ImmutableCreateFractionResults,
}

pub struct CreatePPCall {
	pub func: ScFunc,
	pub params: MutableCreatePPParams,
	pub results: ImmutableCreatePPResults,
}

pub struct CreateRecyclateCall {
	pub func: ScFunc,
	pub params: MutableCreateRecyclateParams,
	pub results: ImmutableCreateRecyclateResults,
}

pub struct InitCall {
	pub func: ScInitFunc,
	pub params: MutableInitParams,
}

pub struct PayoutFracCall {
	pub func: ScFunc,
	pub params: MutablePayoutFracParams,
}

pub struct SetMaterialsCall {
	pub func: ScFunc,
	pub params: MutableSetMaterialsParams,
}

pub struct SetOwnerCall {
	pub func: ScFunc,
	pub params: MutableSetOwnerParams,
}

pub struct GetAmountOfRequiredFundsCall {
	pub func: ScView,
	pub params: MutableGetAmountOfRequiredFundsParams,
	pub results: ImmutableGetAmountOfRequiredFundsResults,
}

pub struct GetMaterialsCall {
	pub func: ScView,
	pub params: MutableGetMaterialsParams,
	pub results: ImmutableGetMaterialsResults,
}

pub struct GetOwnerCall {
	pub func: ScView,
	pub results: ImmutableGetOwnerResults,
}

pub struct GetPPCall {
	pub func: ScView,
	pub params: MutableGetPPParams,
	pub results: ImmutableGetPPResults,
}

pub struct GetTokenPerPackageCall {
	pub func: ScView,
	pub params: MutableGetTokenPerPackageParams,
	pub results: ImmutableGetTokenPerPackageResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn add_material(_ctx: & dyn ScFuncCallContext) -> AddMaterialCall {
        let mut f = AddMaterialCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_MATERIAL),
            params: MutableAddMaterialParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }

    pub fn add_pp_to_fraction(_ctx: & dyn ScFuncCallContext) -> AddPPToFractionCall {
        let mut f = AddPPToFractionCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_PP_TO_FRACTION),
            params: MutableAddPPToFractionParams { id: 0 },
            results: ImmutableAddPPToFractionResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn create_fraction(_ctx: & dyn ScFuncCallContext) -> CreateFractionCall {
        let mut f = CreateFractionCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CREATE_FRACTION),
            params: MutableCreateFractionParams { id: 0 },
            results: ImmutableCreateFractionResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn create_pp(_ctx: & dyn ScFuncCallContext) -> CreatePPCall {
        let mut f = CreatePPCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CREATE_PP),
            params: MutableCreatePPParams { id: 0 },
            results: ImmutableCreatePPResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn create_recyclate(_ctx: & dyn ScFuncCallContext) -> CreateRecyclateCall {
        let mut f = CreateRecyclateCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CREATE_RECYCLATE),
            params: MutableCreateRecyclateParams { id: 0 },
            results: ImmutableCreateRecyclateResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn init(_ctx: & dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func: ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }

    pub fn payout_frac(_ctx: & dyn ScFuncCallContext) -> PayoutFracCall {
        let mut f = PayoutFracCall {
            func: ScFunc::new(HSC_NAME, HFUNC_PAYOUT_FRAC),
            params: MutablePayoutFracParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }

    pub fn set_materials(_ctx: & dyn ScFuncCallContext) -> SetMaterialsCall {
        let mut f = SetMaterialsCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_MATERIALS),
            params: MutableSetMaterialsParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }

    pub fn set_owner(_ctx: & dyn ScFuncCallContext) -> SetOwnerCall {
        let mut f = SetOwnerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_OWNER),
            params: MutableSetOwnerParams { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, ptr::null_mut());
        f
    }

    pub fn get_amount_of_required_funds(_ctx: & dyn ScViewCallContext) -> GetAmountOfRequiredFundsCall {
        let mut f = GetAmountOfRequiredFundsCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_AMOUNT_OF_REQUIRED_FUNDS),
            params: MutableGetAmountOfRequiredFundsParams { id: 0 },
            results: ImmutableGetAmountOfRequiredFundsResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn get_materials(_ctx: & dyn ScViewCallContext) -> GetMaterialsCall {
        let mut f = GetMaterialsCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_MATERIALS),
            params: MutableGetMaterialsParams { id: 0 },
            results: ImmutableGetMaterialsResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn get_owner(_ctx: & dyn ScViewCallContext) -> GetOwnerCall {
        let mut f = GetOwnerCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_OWNER),
            results: ImmutableGetOwnerResults { id: 0 },
        };
        f.func.set_ptrs(ptr::null_mut(), &mut f.results.id);
        f
    }

    pub fn get_pp(_ctx: & dyn ScViewCallContext) -> GetPPCall {
        let mut f = GetPPCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_PP),
            params: MutableGetPPParams { id: 0 },
            results: ImmutableGetPPResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }

    pub fn get_token_per_package(_ctx: & dyn ScViewCallContext) -> GetTokenPerPackageCall {
        let mut f = GetTokenPerPackageCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_TOKEN_PER_PACKAGE),
            params: MutableGetTokenPerPackageParams { id: 0 },
            results: ImmutableGetTokenPerPackageResults { id: 0 },
        };
        f.func.set_ptrs(&mut f.params.id, &mut f.results.id);
        f
    }
}
