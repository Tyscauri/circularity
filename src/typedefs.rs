// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use wasmlib::host::*;
use crate::structs::*;

pub struct ArrayOfImmutableComposition {
	pub(crate) obj_id: i32,
}

impl ArrayOfImmutableComposition {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_composition(&self, index: i32) -> ImmutableComposition {
		ImmutableComposition { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

pub type ImmutableCompositions = ArrayOfImmutableComposition;

pub struct ArrayOfMutableComposition {
	pub(crate) obj_id: i32,
}

impl ArrayOfMutableComposition {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_composition(&self, index: i32) -> MutableComposition {
		MutableComposition { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

pub type MutableCompositions = ArrayOfMutableComposition;

pub struct ArrayOfImmutableFracComposition {
	pub(crate) obj_id: i32,
}

impl ArrayOfImmutableFracComposition {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_frac_composition(&self, index: i32) -> ImmutableFracComposition {
		ImmutableFracComposition { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

pub type ImmutableFracCompositions = ArrayOfImmutableFracComposition;

pub struct ArrayOfMutableFracComposition {
	pub(crate) obj_id: i32,
}

impl ArrayOfMutableFracComposition {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_frac_composition(&self, index: i32) -> MutableFracComposition {
		MutableFracComposition { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

pub type MutableFracCompositions = ArrayOfMutableFracComposition;

pub struct ArrayOfImmutableAgentID {
	pub(crate) obj_id: i32,
}

impl ArrayOfImmutableAgentID {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_agent_id(&self, index: i32) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.obj_id, Key32(index))
    }
}

pub type ImmutableFracPayoffKeys = ArrayOfImmutableAgentID;

pub struct ArrayOfMutableAgentID {
	pub(crate) obj_id: i32,
}

impl ArrayOfMutableAgentID {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_agent_id(&self, index: i32) -> ScMutableAgentID {
        ScMutableAgentID::new(self.obj_id, Key32(index))
    }
}

pub type MutableFracPayoffKeys = ArrayOfMutableAgentID;

pub struct MapAgentIDToImmutableUint64 {
	pub(crate) obj_id: i32,
}

impl MapAgentIDToImmutableUint64 {
    pub fn get_uint64(&self, key: &ScAgentID) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.obj_id, key.get_key_id())
    }
}

pub type ImmutableFracPayoffs = MapAgentIDToImmutableUint64;

pub struct MapAgentIDToMutableUint64 {
	pub(crate) obj_id: i32,
}

impl MapAgentIDToMutableUint64 {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn get_uint64(&self, key: &ScAgentID) -> ScMutableUint64 {
        ScMutableUint64::new(self.obj_id, key.get_key_id())
    }
}

pub type MutableFracPayoffs = MapAgentIDToMutableUint64;

pub struct ArrayOfImmutableRecyComposition {
	pub(crate) obj_id: i32,
}

impl ArrayOfImmutableRecyComposition {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_recy_composition(&self, index: i32) -> ImmutableRecyComposition {
		ImmutableRecyComposition { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

pub type ImmutableRecyCompositions = ArrayOfImmutableRecyComposition;

pub struct ArrayOfMutableRecyComposition {
	pub(crate) obj_id: i32,
}

impl ArrayOfMutableRecyComposition {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

	pub fn get_recy_composition(&self, index: i32) -> MutableRecyComposition {
		MutableRecyComposition { obj_id: self.obj_id, key_id: Key32(index) }
	}
}

pub type MutableRecyCompositions = ArrayOfMutableRecyComposition;
