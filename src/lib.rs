// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use circularity::*;
use wasmlib::*;

use crate::consts::*;
use crate::events::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;
use crate::structs::*;
use crate::typedefs::*;

mod consts;
mod contract;
mod events;
mod params;
mod results;
mod state;
mod structs;
mod typedefs;

mod circularity;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
    	FUNC_ADD_PP_TO_FRACTION,
    	FUNC_CREATE_FRACTION,
    	FUNC_CREATE_PP,
    	FUNC_CREATE_RECYCLATE,
    	FUNC_DELETE_PP,
    	FUNC_INIT,
    	FUNC_PAYOUT_PRODUCER,
    	FUNC_SET_MATERIALS,
    	FUNC_SET_OWNER,
    	VIEW_GET_AMOUNT_OF_REQUIRED_FUNDS,
    	VIEW_GET_MATERIALS,
    	VIEW_GET_OWNER,
    	VIEW_GET_PP,
    	VIEW_GET_TOKEN_PER_PACKAGE,
	],
    funcs: &[
    	func_add_pp_to_fraction_thunk,
    	func_create_fraction_thunk,
    	func_create_pp_thunk,
    	func_create_recyclate_thunk,
    	func_delete_pp_thunk,
    	func_init_thunk,
    	func_payout_producer_thunk,
    	func_set_materials_thunk,
    	func_set_owner_thunk,
	],
    views: &[
    	view_get_amount_of_required_funds_thunk,
    	view_get_materials_thunk,
    	view_get_owner_thunk,
    	view_get_pp_thunk,
    	view_get_token_per_package_thunk,
	],
};

#[no_mangle]
fn on_call(index: i32) {
	ScExports::call(index, &EXPORT_MAP);
}

#[no_mangle]
fn on_load() {
    ScExports::export(&EXPORT_MAP);
}

pub struct AddPPToFractionContext {
	events:  circularityEvents,
	params: ImmutableAddPPToFractionParams,
	results: MutableAddPPToFractionResults,
	state: MutablecircularityState,
}

fn func_add_pp_to_fraction_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcAddPPToFraction");
	let f = AddPPToFractionContext {
		events:  circularityEvents {},
		params: ImmutableAddPPToFractionParams { proxy: params_proxy() },
		results: MutableAddPPToFractionResults { proxy: results_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.frac_id().exists(), "missing mandatory fracID");
	ctx.require(f.params.pp_id().exists(), "missing mandatory ppID");
	func_add_pp_to_fraction(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.funcAddPPToFraction ok");
}

pub struct CreateFractionContext {
	events:  circularityEvents,
	params: ImmutableCreateFractionParams,
	results: MutableCreateFractionResults,
	state: MutablecircularityState,
}

fn func_create_fraction_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcCreateFraction");
	let f = CreateFractionContext {
		events:  circularityEvents {},
		params: ImmutableCreateFractionParams { proxy: params_proxy() },
		results: MutableCreateFractionResults { proxy: results_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.purpose().exists(), "missing mandatory purpose");
	func_create_fraction(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.funcCreateFraction ok");
}

pub struct CreatePPContext {
	events:  circularityEvents,
	params: ImmutableCreatePPParams,
	results: MutableCreatePPResults,
	state: MutablecircularityState,
}

fn func_create_pp_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcCreatePP");
	let f = CreatePPContext {
		events:  circularityEvents {},
		params: ImmutableCreatePPParams { proxy: params_proxy() },
		results: MutableCreatePPResults { proxy: results_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.expiry_date().exists(), "missing mandatory expiryDate");
	ctx.require(f.params.name().exists(), "missing mandatory name");
	ctx.require(f.params.purpose().exists(), "missing mandatory purpose");
	func_create_pp(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.funcCreatePP ok");
}

pub struct CreateRecyclateContext {
	events:  circularityEvents,
	params: ImmutableCreateRecyclateParams,
	results: MutableCreateRecyclateResults,
	state: MutablecircularityState,
}

fn func_create_recyclate_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcCreateRecyclate");
	let f = CreateRecyclateContext {
		events:  circularityEvents {},
		params: ImmutableCreateRecyclateParams { proxy: params_proxy() },
		results: MutableCreateRecyclateResults { proxy: results_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.frac_id().exists(), "missing mandatory fracID");
	func_create_recyclate(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.funcCreateRecyclate ok");
}

pub struct DeletePPContext {
	events:  circularityEvents,
	params: ImmutableDeletePPParams,
	results: MutableDeletePPResults,
	state: MutablecircularityState,
}

fn func_delete_pp_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcDeletePP");
	let f = DeletePPContext {
		events:  circularityEvents {},
		params: ImmutableDeletePPParams { proxy: params_proxy() },
		results: MutableDeletePPResults { proxy: results_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.pp_id().exists(), "missing mandatory ppID");
	func_delete_pp(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.funcDeletePP ok");
}

pub struct InitContext {
	events:  circularityEvents,
	params: ImmutableInitParams,
	state: MutablecircularityState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcInit");
	let f = InitContext {
		events:  circularityEvents {},
		params: ImmutableInitParams { proxy: params_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	func_init(ctx, &f);
	ctx.log("circularity.funcInit ok");
}

pub struct PayoutProducerContext {
	events:  circularityEvents,
	params: ImmutablePayoutProducerParams,
	state: MutablecircularityState,
}

fn func_payout_producer_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcPayoutProducer");
	let f = PayoutProducerContext {
		events:  circularityEvents {},
		params: ImmutablePayoutProducerParams { proxy: params_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.frac_id().exists(), "missing mandatory fracID");
	func_payout_producer(ctx, &f);
	ctx.log("circularity.funcPayoutProducer ok");
}

pub struct SetMaterialsContext {
	events:  circularityEvents,
	params: ImmutableSetMaterialsParams,
	state: MutablecircularityState,
}

fn func_set_materials_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcSetMaterials");
	let f = SetMaterialsContext {
		events:  circularityEvents {},
		params: ImmutableSetMaterialsParams { proxy: params_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.id().exists(), "missing mandatory id");
	func_set_materials(ctx, &f);
	ctx.log("circularity.funcSetMaterials ok");
}

pub struct SetOwnerContext {
	events:  circularityEvents,
	params: ImmutableSetOwnerParams,
	state: MutablecircularityState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
	ctx.log("circularity.funcSetOwner");
	let f = SetOwnerContext {
		events:  circularityEvents {},
		params: ImmutableSetOwnerParams { proxy: params_proxy() },
		state: MutablecircularityState { proxy: state_proxy() },
	};

	// current owner of this smart contract
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	func_set_owner(ctx, &f);
	ctx.log("circularity.funcSetOwner ok");
}

pub struct GetAmountOfRequiredFundsContext {
	params: ImmutableGetAmountOfRequiredFundsParams,
	results: MutableGetAmountOfRequiredFundsResults,
	state: ImmutablecircularityState,
}

fn view_get_amount_of_required_funds_thunk(ctx: &ScViewContext) {
	ctx.log("circularity.viewGetAmountOfRequiredFunds");
	let f = GetAmountOfRequiredFundsContext {
		params: ImmutableGetAmountOfRequiredFundsParams { proxy: params_proxy() },
		results: MutableGetAmountOfRequiredFundsResults { proxy: results_proxy() },
		state: ImmutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.charge_weight().exists(), "missing mandatory chargeWeight");
	view_get_amount_of_required_funds(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.viewGetAmountOfRequiredFunds ok");
}

pub struct GetMaterialsContext {
	params: ImmutableGetMaterialsParams,
	results: MutableGetMaterialsResults,
	state: ImmutablecircularityState,
}

fn view_get_materials_thunk(ctx: &ScViewContext) {
	ctx.log("circularity.viewGetMaterials");
	let f = GetMaterialsContext {
		params: ImmutableGetMaterialsParams { proxy: params_proxy() },
		results: MutableGetMaterialsResults { proxy: results_proxy() },
		state: ImmutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.id().exists(), "missing mandatory id");
	view_get_materials(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.viewGetMaterials ok");
}

pub struct GetOwnerContext {
	results: MutableGetOwnerResults,
	state: ImmutablecircularityState,
}

fn view_get_owner_thunk(ctx: &ScViewContext) {
	ctx.log("circularity.viewGetOwner");
	let f = GetOwnerContext {
		results: MutableGetOwnerResults { proxy: results_proxy() },
		state: ImmutablecircularityState { proxy: state_proxy() },
	};
	view_get_owner(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.viewGetOwner ok");
}

pub struct GetPPContext {
	params: ImmutableGetPPParams,
	results: MutableGetPPResults,
	state: ImmutablecircularityState,
}

fn view_get_pp_thunk(ctx: &ScViewContext) {
	ctx.log("circularity.viewGetPP");
	let f = GetPPContext {
		params: ImmutableGetPPParams { proxy: params_proxy() },
		results: MutableGetPPResults { proxy: results_proxy() },
		state: ImmutablecircularityState { proxy: state_proxy() },
	};
	ctx.require(f.params.id().exists(), "missing mandatory id");
	view_get_pp(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.viewGetPP ok");
}

pub struct GetTokenPerPackageContext {
	params: ImmutableGetTokenPerPackageParams,
	results: MutableGetTokenPerPackageResults,
	state: ImmutablecircularityState,
}

fn view_get_token_per_package_thunk(ctx: &ScViewContext) {
	ctx.log("circularity.viewGetTokenPerPackage");
	let f = GetTokenPerPackageContext {
		params: ImmutableGetTokenPerPackageParams { proxy: params_proxy() },
		results: MutableGetTokenPerPackageResults { proxy: results_proxy() },
		state: ImmutablecircularityState { proxy: state_proxy() },
	};
	view_get_token_per_package(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("circularity.viewGetTokenPerPackage ok");
}
