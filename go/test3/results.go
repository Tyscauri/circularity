// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package test3

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type ImmutableCreatePPResults struct {
	id int32
}

func (s ImmutableCreatePPResults) Id() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, idxMap[IdxResultId])
}

type MutableCreatePPResults struct {
	id int32
}

func (s MutableCreatePPResults) Id() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, idxMap[IdxResultId])
}

type ImmutableGetAmountOfRequiredFundsResults struct {
	id int32
}

func (s ImmutableGetAmountOfRequiredFundsResults) TokenRequired() wasmlib.ScImmutableUint64 {
	return wasmlib.NewScImmutableUint64(s.id, idxMap[IdxResultTokenRequired])
}

type MutableGetAmountOfRequiredFundsResults struct {
	id int32
}

func (s MutableGetAmountOfRequiredFundsResults) TokenRequired() wasmlib.ScMutableUint64 {
	return wasmlib.NewScMutableUint64(s.id, idxMap[IdxResultTokenRequired])
}

type ImmutableGetMaterialsResults struct {
	id int32
}

func (s ImmutableGetMaterialsResults) Compositions() ImmutableCompositions {
	subID := wasmlib.GetObjectID(s.id, idxMap[IdxResultCompositions], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ImmutableCompositions{objID: subID}
}

type MutableGetMaterialsResults struct {
	id int32
}

func (s MutableGetMaterialsResults) Compositions() MutableCompositions {
	subID := wasmlib.GetObjectID(s.id, idxMap[IdxResultCompositions], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return MutableCompositions{objID: subID}
}

type ImmutableGetOwnerResults struct {
	id int32
}

func (s ImmutableGetOwnerResults) Owner() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxResultOwner])
}

type MutableGetOwnerResults struct {
	id int32
}

func (s MutableGetOwnerResults) Owner() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxResultOwner])
}

type ImmutableGetPPResults struct {
	id int32
}

func (s ImmutableGetPPResults) Ppname() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxResultPpname])
}

func (s ImmutableGetPPResults) Ppresult() ImmutableProductPass {
	return ImmutableProductPass{objID: s.id, keyID: idxMap[IdxResultPpresult]}
}

type MutableGetPPResults struct {
	id int32
}

func (s MutableGetPPResults) Ppname() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxResultPpname])
}

func (s MutableGetPPResults) Ppresult() MutableProductPass {
	return MutableProductPass{objID: s.id, keyID: idxMap[IdxResultPpresult]}
}

type ImmutableGetTokenPerPackageResults struct {
	id int32
}

func (s ImmutableGetTokenPerPackageResults) TokenPerPackage() wasmlib.ScImmutableUint64 {
	return wasmlib.NewScImmutableUint64(s.id, idxMap[IdxResultTokenPerPackage])
}

type MutableGetTokenPerPackageResults struct {
	id int32
}

func (s MutableGetTokenPerPackageResults) TokenPerPackage() wasmlib.ScMutableUint64 {
	return wasmlib.NewScMutableUint64(s.id, idxMap[IdxResultTokenPerPackage])
}
