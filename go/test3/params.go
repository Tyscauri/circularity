// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package test3

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type ImmutableAddMaterialParams struct {
	id int32
}

func (s ImmutableAddMaterialParams) Id() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, idxMap[IdxParamId])
}

func (s ImmutableAddMaterialParams) Mat() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxParamMat])
}

func (s ImmutableAddMaterialParams) Prop() wasmlib.ScImmutableUint8 {
	return wasmlib.NewScImmutableUint8(s.id, idxMap[IdxParamProp])
}

type MutableAddMaterialParams struct {
	id int32
}

func (s MutableAddMaterialParams) Id() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, idxMap[IdxParamId])
}

func (s MutableAddMaterialParams) Mat() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxParamMat])
}

func (s MutableAddMaterialParams) Prop() wasmlib.ScMutableUint8 {
	return wasmlib.NewScMutableUint8(s.id, idxMap[IdxParamProp])
}

type ImmutableAddPPToFractionParams struct {
	id int32
}

func (s ImmutableAddPPToFractionParams) FracID() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, idxMap[IdxParamFracID])
}

func (s ImmutableAddPPToFractionParams) PpID() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, idxMap[IdxParamPpID])
}

type MutableAddPPToFractionParams struct {
	id int32
}

func (s MutableAddPPToFractionParams) FracID() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, idxMap[IdxParamFracID])
}

func (s MutableAddPPToFractionParams) PpID() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, idxMap[IdxParamPpID])
}

type ImmutableCreateFractionParams struct {
	id int32
}

func (s ImmutableCreateFractionParams) Name() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxParamName])
}

type MutableCreateFractionParams struct {
	id int32
}

func (s MutableCreateFractionParams) Name() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxParamName])
}

type ImmutableCreatePPParams struct {
	id int32
}

func (s ImmutableCreatePPParams) Name() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxParamName])
}

type MutableCreatePPParams struct {
	id int32
}

func (s MutableCreatePPParams) Name() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxParamName])
}

type ImmutableInitParams struct {
	id int32
}

func (s ImmutableInitParams) Owner() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxParamOwner])
}

type MutableInitParams struct {
	id int32
}

func (s MutableInitParams) Owner() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxParamOwner])
}

type ImmutableSetMaterialsParams struct {
	id int32
}

func (s ImmutableSetMaterialsParams) Comp() ImmutableCompositions {
	subID := wasmlib.GetObjectID(s.id, idxMap[IdxParamComp], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ImmutableCompositions{objID: subID}
}

func (s ImmutableSetMaterialsParams) Id() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, idxMap[IdxParamId])
}

type MutableSetMaterialsParams struct {
	id int32
}

func (s MutableSetMaterialsParams) Comp() MutableCompositions {
	subID := wasmlib.GetObjectID(s.id, idxMap[IdxParamComp], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return MutableCompositions{objID: subID}
}

func (s MutableSetMaterialsParams) Id() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, idxMap[IdxParamId])
}

type ImmutableSetOwnerParams struct {
	id int32
}

func (s ImmutableSetOwnerParams) Owner() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxParamOwner])
}

type MutableSetOwnerParams struct {
	id int32
}

func (s MutableSetOwnerParams) Owner() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxParamOwner])
}

type ImmutableGetAmountOfRequiredFundsParams struct {
	id int32
}

func (s ImmutableGetAmountOfRequiredFundsParams) ChargeWeight() wasmlib.ScImmutableUint64 {
	return wasmlib.NewScImmutableUint64(s.id, idxMap[IdxParamChargeWeight])
}

type MutableGetAmountOfRequiredFundsParams struct {
	id int32
}

func (s MutableGetAmountOfRequiredFundsParams) ChargeWeight() wasmlib.ScMutableUint64 {
	return wasmlib.NewScMutableUint64(s.id, idxMap[IdxParamChargeWeight])
}

type ImmutableGetMaterialsParams struct {
	id int32
}

func (s ImmutableGetMaterialsParams) Id() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, idxMap[IdxParamId])
}

type MutableGetMaterialsParams struct {
	id int32
}

func (s MutableGetMaterialsParams) Id() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, idxMap[IdxParamId])
}

type ImmutableGetPPParams struct {
	id int32
}

func (s ImmutableGetPPParams) Id() wasmlib.ScImmutableHash {
	return wasmlib.NewScImmutableHash(s.id, idxMap[IdxParamId])
}

type MutableGetPPParams struct {
	id int32
}

func (s MutableGetPPParams) Id() wasmlib.ScMutableHash {
	return wasmlib.NewScMutableHash(s.id, idxMap[IdxParamId])
}

type ImmutableGetTokenPerPackageParams struct {
	id int32
}

func (s ImmutableGetTokenPerPackageParams) ProdPass() ImmutableProductPass {
	return ImmutableProductPass{objID: s.id, keyID: idxMap[IdxParamProdPass]}
}

type MutableGetTokenPerPackageParams struct {
	id int32
}

func (s MutableGetTokenPerPackageParams) ProdPass() MutableProductPass {
	return MutableProductPass{objID: s.id, keyID: idxMap[IdxParamProdPass]}
}
