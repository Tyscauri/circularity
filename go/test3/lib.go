// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package test3

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncAddMaterial,              funcAddMaterialThunk)
	exports.AddFunc(FuncAddPPToFraction,          funcAddPPToFractionThunk)
	exports.AddFunc(FuncCreateFraction,           funcCreateFractionThunk)
	exports.AddFunc(FuncCreatePP,                 funcCreatePPThunk)
	exports.AddFunc(FuncInit,                     funcInitThunk)
	exports.AddFunc(FuncSetMaterials,             funcSetMaterialsThunk)
	exports.AddFunc(FuncSetOwner,                 funcSetOwnerThunk)
	exports.AddView(ViewGetAmountOfRequiredFunds, viewGetAmountOfRequiredFundsThunk)
	exports.AddView(ViewGetMaterials,             viewGetMaterialsThunk)
	exports.AddView(ViewGetOwner,                 viewGetOwnerThunk)
	exports.AddView(ViewGetPP,                    viewGetPPThunk)
	exports.AddView(ViewGetTokenPerPackage,       viewGetTokenPerPackageThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type AddMaterialContext struct {
	Params  ImmutableAddMaterialParams
	State   Mutabletest3State
}

func funcAddMaterialThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("test3.funcAddMaterial")
	f := &AddMaterialContext{
		Params: ImmutableAddMaterialParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: Mutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	ctx.Require(f.Params.Mat().Exists(), "missing mandatory mat")
	ctx.Require(f.Params.Prop().Exists(), "missing mandatory prop")
	funcAddMaterial(ctx, f)
	ctx.Log("test3.funcAddMaterial ok")
}

type AddPPToFractionContext struct {
	Params  ImmutableAddPPToFractionParams
	State   Mutabletest3State
}

func funcAddPPToFractionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("test3.funcAddPPToFraction")
	f := &AddPPToFractionContext{
		Params: ImmutableAddPPToFractionParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: Mutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.FracID().Exists(), "missing mandatory fracID")
	ctx.Require(f.Params.PpID().Exists(), "missing mandatory ppID")
	funcAddPPToFraction(ctx, f)
	ctx.Log("test3.funcAddPPToFraction ok")
}

type CreateFractionContext struct {
	Params  ImmutableCreateFractionParams
	State   Mutabletest3State
}

func funcCreateFractionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("test3.funcCreateFraction")
	f := &CreateFractionContext{
		Params: ImmutableCreateFractionParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: Mutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcCreateFraction(ctx, f)
	ctx.Log("test3.funcCreateFraction ok")
}

type CreatePPContext struct {
	Params  ImmutableCreatePPParams
	Results MutableCreatePPResults
	State   Mutabletest3State
}

func funcCreatePPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("test3.funcCreatePP")
	f := &CreatePPContext{
		Params: ImmutableCreatePPParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableCreatePPResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: Mutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	funcCreatePP(ctx, f)
	ctx.Log("test3.funcCreatePP ok")
}

type InitContext struct {
	Params  ImmutableInitParams
	State   Mutabletest3State
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("test3.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: Mutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcInit(ctx, f)
	ctx.Log("test3.funcInit ok")
}

type SetMaterialsContext struct {
	Params  ImmutableSetMaterialsParams
	State   Mutabletest3State
}

func funcSetMaterialsThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("test3.funcSetMaterials")
	f := &SetMaterialsContext{
		Params: ImmutableSetMaterialsParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: Mutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	funcSetMaterials(ctx, f)
	ctx.Log("test3.funcSetMaterials ok")
}

type SetOwnerContext struct {
	Params  ImmutableSetOwnerParams
	State   Mutabletest3State
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("test3.funcSetOwner")

	// current owner of this smart contract
	access := ctx.State().GetAgentID(wasmlib.Key("owner"))
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: Mutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("test3.funcSetOwner ok")
}

type GetAmountOfRequiredFundsContext struct {
	Params  ImmutableGetAmountOfRequiredFundsParams
	Results MutableGetAmountOfRequiredFundsResults
	State   Immutabletest3State
}

func viewGetAmountOfRequiredFundsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("test3.viewGetAmountOfRequiredFunds")
	f := &GetAmountOfRequiredFundsContext{
		Params: ImmutableGetAmountOfRequiredFundsParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableGetAmountOfRequiredFundsResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: Immutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.ChargeWeight().Exists(), "missing mandatory chargeWeight")
	viewGetAmountOfRequiredFunds(ctx, f)
	ctx.Log("test3.viewGetAmountOfRequiredFunds ok")
}

type GetMaterialsContext struct {
	Params  ImmutableGetMaterialsParams
	Results MutableGetMaterialsResults
	State   Immutabletest3State
}

func viewGetMaterialsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("test3.viewGetMaterials")
	f := &GetMaterialsContext{
		Params: ImmutableGetMaterialsParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableGetMaterialsResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: Immutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	viewGetMaterials(ctx, f)
	ctx.Log("test3.viewGetMaterials ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   Immutabletest3State
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("test3.viewGetOwner")
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: Immutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetOwner(ctx, f)
	ctx.Log("test3.viewGetOwner ok")
}

type GetPPContext struct {
	Params  ImmutableGetPPParams
	Results MutableGetPPResults
	State   Immutabletest3State
}

func viewGetPPThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("test3.viewGetPP")
	f := &GetPPContext{
		Params: ImmutableGetPPParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableGetPPResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: Immutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	viewGetPP(ctx, f)
	ctx.Log("test3.viewGetPP ok")
}

type GetTokenPerPackageContext struct {
	Params  ImmutableGetTokenPerPackageParams
	Results MutableGetTokenPerPackageResults
	State   Immutabletest3State
}

func viewGetTokenPerPackageThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("test3.viewGetTokenPerPackage")
	f := &GetTokenPerPackageContext{
		Params: ImmutableGetTokenPerPackageParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableGetTokenPerPackageResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: Immutabletest3State{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.ProdPass().Exists(), "missing mandatory prodPass")
	viewGetTokenPerPackage(ctx, f)
	ctx.Log("test3.viewGetTokenPerPackage ok")
}
