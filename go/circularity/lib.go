// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package circularity

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
    	FuncAddMaterial,
    	FuncAddPPToFraction,
    	FuncCreateFraction,
    	FuncCreatePP,
    	FuncCreateRecyclate,
    	FuncInit,
    	FuncPayoutFrac,
    	FuncSetMaterials,
    	FuncSetOwner,
    	ViewGetAmountOfRequiredFunds,
    	ViewGetMaterials,
    	ViewGetOwner,
    	ViewGetPP,
    	ViewGetTokenPerPackage,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
    	funcAddMaterialThunk,
    	funcAddPPToFractionThunk,
    	funcCreateFractionThunk,
    	funcCreatePPThunk,
    	funcCreateRecyclateThunk,
    	funcInitThunk,
    	funcPayoutFracThunk,
    	funcSetMaterialsThunk,
    	funcSetOwnerThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
    	viewGetAmountOfRequiredFundsThunk,
    	viewGetMaterialsThunk,
    	viewGetOwnerThunk,
    	viewGetPPThunk,
    	viewGetTokenPerPackageThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type AddMaterialContext struct {
	Events  circularityEvents
	Params  ImmutableAddMaterialParams
	State   MutablecircularityState
}

func funcAddMaterialThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcAddMaterial")
	f := &AddMaterialContext{
		Params: ImmutableAddMaterialParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	ctx.Require(f.Params.Mat().Exists(), "missing mandatory mat")
	ctx.Require(f.Params.Prop().Exists(), "missing mandatory prop")
	funcAddMaterial(ctx, f)
	ctx.Log("circularity.funcAddMaterial ok")
}

type AddPPToFractionContext struct {
	Events  circularityEvents
	Params  ImmutableAddPPToFractionParams
	Results MutableAddPPToFractionResults
	State   MutablecircularityState
}

func funcAddPPToFractionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcAddPPToFraction")
	results := wasmlib.NewScDict()
	f := &AddPPToFractionContext{
		Params: ImmutableAddPPToFractionParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableAddPPToFractionResults{
			proxy: results.AsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.FracID().Exists(), "missing mandatory fracID")
	ctx.Require(f.Params.PpID().Exists(), "missing mandatory ppID")
	funcAddPPToFraction(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.funcAddPPToFraction ok")
}

type CreateFractionContext struct {
	Events  circularityEvents
	Params  ImmutableCreateFractionParams
	Results MutableCreateFractionResults
	State   MutablecircularityState
}

func funcCreateFractionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcCreateFraction")
	results := wasmlib.NewScDict()
	f := &CreateFractionContext{
		Params: ImmutableCreateFractionParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableCreateFractionResults{
			proxy: results.AsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcCreateFraction(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.funcCreateFraction ok")
}

type CreatePPContext struct {
	Events  circularityEvents
	Params  ImmutableCreatePPParams
	Results MutableCreatePPResults
	State   MutablecircularityState
}

func funcCreatePPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcCreatePP")
	results := wasmlib.NewScDict()
	f := &CreatePPContext{
		Params: ImmutableCreatePPParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableCreatePPResults{
			proxy: results.AsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	funcCreatePP(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.funcCreatePP ok")
}

type CreateRecyclateContext struct {
	Events  circularityEvents
	Params  ImmutableCreateRecyclateParams
	Results MutableCreateRecyclateResults
	State   MutablecircularityState
}

func funcCreateRecyclateThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcCreateRecyclate")
	results := wasmlib.NewScDict()
	f := &CreateRecyclateContext{
		Params: ImmutableCreateRecyclateParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableCreateRecyclateResults{
			proxy: results.AsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.FracID().Exists(), "missing mandatory fracID")
	funcCreateRecyclate(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.funcCreateRecyclate ok")
}

type InitContext struct {
	Events  circularityEvents
	Params  ImmutableInitParams
	State   MutablecircularityState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("circularity.funcInit ok")
}

type PayoutFracContext struct {
	Events  circularityEvents
	Params  ImmutablePayoutFracParams
	State   MutablecircularityState
}

func funcPayoutFracThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcPayoutFrac")
	f := &PayoutFracContext{
		Params: ImmutablePayoutFracParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.FracID().Exists(), "missing mandatory fracID")
	funcPayoutFrac(ctx, f)
	ctx.Log("circularity.funcPayoutFrac ok")
}

type SetMaterialsContext struct {
	Events  circularityEvents
	Params  ImmutableSetMaterialsParams
	State   MutablecircularityState
}

func funcSetMaterialsThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcSetMaterials")
	f := &SetMaterialsContext{
		Params: ImmutableSetMaterialsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	funcSetMaterials(ctx, f)
	ctx.Log("circularity.funcSetMaterials ok")
}

type SetOwnerContext struct {
	Events  circularityEvents
	Params  ImmutableSetOwnerParams
	State   MutablecircularityState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("circularity.funcSetOwner ok")
}

type GetAmountOfRequiredFundsContext struct {
	Params  ImmutableGetAmountOfRequiredFundsParams
	Results MutableGetAmountOfRequiredFundsResults
	State   ImmutablecircularityState
}

func viewGetAmountOfRequiredFundsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity.viewGetAmountOfRequiredFunds")
	results := wasmlib.NewScDict()
	f := &GetAmountOfRequiredFundsContext{
		Params: ImmutableGetAmountOfRequiredFundsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetAmountOfRequiredFundsResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.ChargeWeight().Exists(), "missing mandatory chargeWeight")
	viewGetAmountOfRequiredFunds(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.viewGetAmountOfRequiredFunds ok")
}

type GetMaterialsContext struct {
	Params  ImmutableGetMaterialsParams
	Results MutableGetMaterialsResults
	State   ImmutablecircularityState
}

func viewGetMaterialsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity.viewGetMaterials")
	results := wasmlib.NewScDict()
	f := &GetMaterialsContext{
		Params: ImmutableGetMaterialsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetMaterialsResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	viewGetMaterials(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.viewGetMaterials ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutablecircularityState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.viewGetOwner ok")
}

type GetPPContext struct {
	Params  ImmutableGetPPParams
	Results MutableGetPPResults
	State   ImmutablecircularityState
}

func viewGetPPThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity.viewGetPP")
	results := wasmlib.NewScDict()
	f := &GetPPContext{
		Params: ImmutableGetPPParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetPPResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	viewGetPP(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.viewGetPP ok")
}

type GetTokenPerPackageContext struct {
	Params  ImmutableGetTokenPerPackageParams
	Results MutableGetTokenPerPackageResults
	State   ImmutablecircularityState
}

func viewGetTokenPerPackageThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity.viewGetTokenPerPackage")
	results := wasmlib.NewScDict()
	f := &GetTokenPerPackageContext{
		Params: ImmutableGetTokenPerPackageParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetTokenPerPackageResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablecircularityState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetTokenPerPackage(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity.viewGetTokenPerPackage ok")
}
