// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package test3

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type MapHashToImmutableCompositions struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableCompositions) GetCompositions(key wasmtypes.ScHash) ImmutableCompositions {
	return ImmutableCompositions{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToImmutableFracCompositions struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableFracCompositions) GetFracCompositions(key wasmtypes.ScHash) ImmutableFracCompositions {
	return ImmutableFracCompositions{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToImmutableFraction struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableFraction) GetFraction(key wasmtypes.ScHash) ImmutableFraction {
	return ImmutableFraction{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToImmutableFracPayoffKeys struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableFracPayoffKeys) GetFracPayoffKeys(key wasmtypes.ScHash) ImmutableFracPayoffKeys {
	return ImmutableFracPayoffKeys{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToImmutableFracPayoffs struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableFracPayoffs) GetFracPayoffs(key wasmtypes.ScHash) ImmutableFracPayoffs {
	return ImmutableFracPayoffs{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToImmutableProductPass struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableProductPass) GetProductPass(key wasmtypes.ScHash) ImmutableProductPass {
	return ImmutableProductPass{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToImmutableRecyCompositions struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableRecyCompositions) GetRecyCompositions(key wasmtypes.ScHash) ImmutableRecyCompositions {
	return ImmutableRecyCompositions{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToImmutableRecyclate struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToImmutableRecyclate) GetRecyclate(key wasmtypes.ScHash) ImmutableRecyclate {
	return ImmutableRecyclate{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type Immutabletest3State struct {
	proxy wasmtypes.Proxy
}

func (s Immutabletest3State) Compositions() MapHashToImmutableCompositions {
	return MapHashToImmutableCompositions{proxy: s.proxy.Root(StateCompositions)}
}

func (s Immutabletest3State) FracCompositions() MapHashToImmutableFracCompositions {
	return MapHashToImmutableFracCompositions{proxy: s.proxy.Root(StateFracCompositions)}
}

func (s Immutabletest3State) Fractions() MapHashToImmutableFraction {
	return MapHashToImmutableFraction{proxy: s.proxy.Root(StateFractions)}
}

func (s Immutabletest3State) LastPayout() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(StateLastPayout))
}

func (s Immutabletest3State) Owner() wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(s.proxy.Root(StateOwner))
}

func (s Immutabletest3State) PayoffKeysFrac() MapHashToImmutableFracPayoffKeys {
	return MapHashToImmutableFracPayoffKeys{proxy: s.proxy.Root(StatePayoffKeysFrac)}
}

func (s Immutabletest3State) PayoffsFrac() MapHashToImmutableFracPayoffs {
	return MapHashToImmutableFracPayoffs{proxy: s.proxy.Root(StatePayoffsFrac)}
}

func (s Immutabletest3State) PricePerMg() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(StatePricePerMg))
}

func (s Immutabletest3State) Productpasses() MapHashToImmutableProductPass {
	return MapHashToImmutableProductPass{proxy: s.proxy.Root(StateProductpasses)}
}

func (s Immutabletest3State) RecyCompositions() MapHashToImmutableRecyCompositions {
	return MapHashToImmutableRecyCompositions{proxy: s.proxy.Root(StateRecyCompositions)}
}

func (s Immutabletest3State) Recyclates() MapHashToImmutableRecyclate {
	return MapHashToImmutableRecyclate{proxy: s.proxy.Root(StateRecyclates)}
}

func (s Immutabletest3State) ShareRecycler() wasmtypes.ScImmutableUint8 {
	return wasmtypes.NewScImmutableUint8(s.proxy.Root(StateShareRecycler))
}

type MapHashToMutableCompositions struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableCompositions) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableCompositions) GetCompositions(key wasmtypes.ScHash) MutableCompositions {
	return MutableCompositions{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToMutableFracCompositions struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableFracCompositions) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableFracCompositions) GetFracCompositions(key wasmtypes.ScHash) MutableFracCompositions {
	return MutableFracCompositions{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToMutableFraction struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableFraction) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableFraction) GetFraction(key wasmtypes.ScHash) MutableFraction {
	return MutableFraction{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToMutableFracPayoffKeys struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableFracPayoffKeys) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableFracPayoffKeys) GetFracPayoffKeys(key wasmtypes.ScHash) MutableFracPayoffKeys {
	return MutableFracPayoffKeys{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToMutableFracPayoffs struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableFracPayoffs) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableFracPayoffs) GetFracPayoffs(key wasmtypes.ScHash) MutableFracPayoffs {
	return MutableFracPayoffs{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToMutableProductPass struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableProductPass) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableProductPass) GetProductPass(key wasmtypes.ScHash) MutableProductPass {
	return MutableProductPass{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToMutableRecyCompositions struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableRecyCompositions) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableRecyCompositions) GetRecyCompositions(key wasmtypes.ScHash) MutableRecyCompositions {
	return MutableRecyCompositions{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type MapHashToMutableRecyclate struct {
	proxy wasmtypes.Proxy
}

func (m MapHashToMutableRecyclate) Clear() {
	m.proxy.ClearMap()
}

func (m MapHashToMutableRecyclate) GetRecyclate(key wasmtypes.ScHash) MutableRecyclate {
	return MutableRecyclate{proxy: m.proxy.Key(wasmtypes.HashToBytes(key))}
}

type Mutabletest3State struct {
	proxy wasmtypes.Proxy
}

func (s Mutabletest3State) AsImmutable() Immutabletest3State {
	return Immutabletest3State(s)
}

func (s Mutabletest3State) Compositions() MapHashToMutableCompositions {
	return MapHashToMutableCompositions{proxy: s.proxy.Root(StateCompositions)}
}

func (s Mutabletest3State) FracCompositions() MapHashToMutableFracCompositions {
	return MapHashToMutableFracCompositions{proxy: s.proxy.Root(StateFracCompositions)}
}

func (s Mutabletest3State) Fractions() MapHashToMutableFraction {
	return MapHashToMutableFraction{proxy: s.proxy.Root(StateFractions)}
}

func (s Mutabletest3State) LastPayout() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(StateLastPayout))
}

func (s Mutabletest3State) Owner() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(s.proxy.Root(StateOwner))
}

func (s Mutabletest3State) PayoffKeysFrac() MapHashToMutableFracPayoffKeys {
	return MapHashToMutableFracPayoffKeys{proxy: s.proxy.Root(StatePayoffKeysFrac)}
}

func (s Mutabletest3State) PayoffsFrac() MapHashToMutableFracPayoffs {
	return MapHashToMutableFracPayoffs{proxy: s.proxy.Root(StatePayoffsFrac)}
}

func (s Mutabletest3State) PricePerMg() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(StatePricePerMg))
}

func (s Mutabletest3State) Productpasses() MapHashToMutableProductPass {
	return MapHashToMutableProductPass{proxy: s.proxy.Root(StateProductpasses)}
}

func (s Mutabletest3State) RecyCompositions() MapHashToMutableRecyCompositions {
	return MapHashToMutableRecyCompositions{proxy: s.proxy.Root(StateRecyCompositions)}
}

func (s Mutabletest3State) Recyclates() MapHashToMutableRecyclate {
	return MapHashToMutableRecyclate{proxy: s.proxy.Root(StateRecyclates)}
}

func (s Mutabletest3State) ShareRecycler() wasmtypes.ScMutableUint8 {
	return wasmtypes.NewScMutableUint8(s.proxy.Root(StateShareRecycler))
}
